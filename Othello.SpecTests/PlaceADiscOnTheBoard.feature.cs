// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Othello.SpecTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PlaceADiscOnTheBoard4X4Feature : object, Xunit.IClassFixture<PlaceADiscOnTheBoard4X4Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PlaceADiscOnTheBoard.feature"
#line hidden
        
        public PlaceADiscOnTheBoard4X4Feature(PlaceADiscOnTheBoard4X4Feature.FixtureData fixtureData, Othello_SpecTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Place a disc on the board (4x4)", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
 testRunner.Given("an initial 4x4 board is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="First move: Black places a disc in a2 on the initial board which should flip the " +
            "sandwiched white disc in b2")]
        [Xunit.TraitAttribute("FeatureTitle", "Place a disc on the board (4x4)")]
        [Xunit.TraitAttribute("Description", "First move: Black places a disc in a2 on the initial board which should flip the " +
            "sandwiched white disc in b2")]
        public virtual void FirstMoveBlackPlacesADiscInA2OnTheInitialBoardWhichShouldFlipTheSandwichedWhiteDiscInB2()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("First move: Black places a disc in a2 on the initial board which should flip the " +
                    "sandwiched white disc in b2", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 7
 testRunner.When("Black places a disc in square a2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "a",
                            "b",
                            "c",
                            "d"});
                table5.AddRow(new string[] {
                            "1",
                            "",
                            "",
                            "",
                            ""});
                table5.AddRow(new string[] {
                            "2",
                            "B",
                            "B",
                            "B",
                            ""});
                table5.AddRow(new string[] {
                            "3",
                            "",
                            "B",
                            "W",
                            ""});
                table5.AddRow(new string[] {
                            "4",
                            "",
                            "",
                            "",
                            ""});
#line 8
 testRunner.Then("the board should be like this", ((string)(null)), table5, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Second move by White on the previous 4x4 board")]
        [Xunit.TraitAttribute("FeatureTitle", "Place a disc on the board (4x4)")]
        [Xunit.TraitAttribute("Description", "Second move by White on the previous 4x4 board")]
        public virtual void SecondMoveByWhiteOnThePrevious4X4Board()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Second move by White on the previous 4x4 board", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 16
 testRunner.Given("Black placed a disc in square a2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
 testRunner.When("White places a disc in square c1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "a",
                            "b",
                            "c",
                            "d"});
                table6.AddRow(new string[] {
                            "1",
                            "",
                            "",
                            "W",
                            ""});
                table6.AddRow(new string[] {
                            "2",
                            "B",
                            "B",
                            "W",
                            ""});
                table6.AddRow(new string[] {
                            "3",
                            "",
                            "B",
                            "W",
                            ""});
                table6.AddRow(new string[] {
                            "4",
                            "",
                            "",
                            "",
                            ""});
#line 18
 testRunner.Then("the board should be like this", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Third move by Black on the previous 4x4 board")]
        [Xunit.TraitAttribute("FeatureTitle", "Place a disc on the board (4x4)")]
        [Xunit.TraitAttribute("Description", "Third move by Black on the previous 4x4 board")]
        public virtual void ThirdMoveByBlackOnThePrevious4X4Board()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Third move by Black on the previous 4x4 board", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 26
 testRunner.Given("Black placed a disc in square a2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 27
 testRunner.And("White placed a disc in square c1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.When("Black places a disc in square d2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "a",
                            "b",
                            "c",
                            "d"});
                table7.AddRow(new string[] {
                            "1",
                            "",
                            "",
                            "W",
                            ""});
                table7.AddRow(new string[] {
                            "2",
                            "B",
                            "B",
                            "B",
                            "B"});
                table7.AddRow(new string[] {
                            "3",
                            "",
                            "B",
                            "W",
                            ""});
                table7.AddRow(new string[] {
                            "4",
                            "",
                            "",
                            "",
                            ""});
#line 29
 testRunner.Then("the board should be like this", ((string)(null)), table7, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="4th move by White on the previous 4x4 board")]
        [Xunit.TraitAttribute("FeatureTitle", "Place a disc on the board (4x4)")]
        [Xunit.TraitAttribute("Description", "4th move by White on the previous 4x4 board")]
        public virtual void _4ThMoveByWhiteOnThePrevious4X4Board()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("4th move by White on the previous 4x4 board", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 37
 testRunner.Given("Black placed a disc in square a2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
 testRunner.And("White placed a disc in square c1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("Black placed a disc in square d2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.When("White places a disc in square a3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "a",
                            "b",
                            "c",
                            "d"});
                table8.AddRow(new string[] {
                            "1",
                            "",
                            "",
                            "W",
                            ""});
                table8.AddRow(new string[] {
                            "2",
                            "B",
                            "W",
                            "B",
                            "B"});
                table8.AddRow(new string[] {
                            "3",
                            "W",
                            "W",
                            "W",
                            ""});
                table8.AddRow(new string[] {
                            "4",
                            "",
                            "",
                            "",
                            ""});
#line 41
 testRunner.Then("the board should be like this", ((string)(null)), table8, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="5th move by Black on the previous 4x4 board")]
        [Xunit.TraitAttribute("FeatureTitle", "Place a disc on the board (4x4)")]
        [Xunit.TraitAttribute("Description", "5th move by Black on the previous 4x4 board")]
        public virtual void _5ThMoveByBlackOnThePrevious4X4Board()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5th move by Black on the previous 4x4 board", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 49
 testRunner.Given("Black placed a disc in square a2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
 testRunner.And("White placed a disc in square c1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.And("Black placed a disc in square d2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And("White placed a disc in square a3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.When("Black places a disc in square a4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "a",
                            "b",
                            "c",
                            "d"});
                table9.AddRow(new string[] {
                            "1",
                            "",
                            "",
                            "W",
                            ""});
                table9.AddRow(new string[] {
                            "2",
                            "B",
                            "W",
                            "B",
                            "B"});
                table9.AddRow(new string[] {
                            "3",
                            "B",
                            "B",
                            "W",
                            ""});
                table9.AddRow(new string[] {
                            "4",
                            "B",
                            "",
                            "",
                            ""});
#line 54
 testRunner.Then("the board should be like this", ((string)(null)), table9, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="6th move by White on the previous 4x4 board")]
        [Xunit.TraitAttribute("FeatureTitle", "Place a disc on the board (4x4)")]
        [Xunit.TraitAttribute("Description", "6th move by White on the previous 4x4 board")]
        public virtual void _6ThMoveByWhiteOnThePrevious4X4Board()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("6th move by White on the previous 4x4 board", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 62
 testRunner.Given("Black placed a disc in square a2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 63
 testRunner.And("White placed a disc in square c1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And("Black placed a disc in square d2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.And("White placed a disc in square a3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
 testRunner.And("Black placed a disc in square a4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
 testRunner.When("White places a disc in square b4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "a",
                            "b",
                            "c",
                            "d"});
                table10.AddRow(new string[] {
                            "1",
                            "",
                            "",
                            "W",
                            ""});
                table10.AddRow(new string[] {
                            "2",
                            "B",
                            "W",
                            "B",
                            "B"});
                table10.AddRow(new string[] {
                            "3",
                            "B",
                            "W",
                            "W",
                            ""});
                table10.AddRow(new string[] {
                            "4",
                            "B",
                            "W",
                            "",
                            ""});
#line 68
 testRunner.Then("the board should be like this", ((string)(null)), table10, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="7th move by Black on the previous 4x4 board")]
        [Xunit.TraitAttribute("FeatureTitle", "Place a disc on the board (4x4)")]
        [Xunit.TraitAttribute("Description", "7th move by Black on the previous 4x4 board")]
        public virtual void _7ThMoveByBlackOnThePrevious4X4Board()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("7th move by Black on the previous 4x4 board", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 76
 testRunner.Given("Black placed a disc in square a2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 77
 testRunner.And("White placed a disc in square c1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And("Black placed a disc in square d2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.And("White placed a disc in square a3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
 testRunner.And("Black placed a disc in square a4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
 testRunner.And("White placed a disc in square b4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
 testRunner.When("Black places a disc in square c4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "a",
                            "b",
                            "c",
                            "d"});
                table11.AddRow(new string[] {
                            "1",
                            "",
                            "",
                            "W",
                            ""});
                table11.AddRow(new string[] {
                            "2",
                            "B",
                            "W",
                            "B",
                            "B"});
                table11.AddRow(new string[] {
                            "3",
                            "B",
                            "B",
                            "B",
                            ""});
                table11.AddRow(new string[] {
                            "4",
                            "B",
                            "B",
                            "B",
                            ""});
#line 83
 testRunner.Then("the board should be like this", ((string)(null)), table11, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="8th move by White on the previous 4x4 board")]
        [Xunit.TraitAttribute("FeatureTitle", "Place a disc on the board (4x4)")]
        [Xunit.TraitAttribute("Description", "8th move by White on the previous 4x4 board")]
        public virtual void _8ThMoveByWhiteOnThePrevious4X4Board()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("8th move by White on the previous 4x4 board", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 91
 testRunner.Given("Black placed a disc in square a2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 92
 testRunner.And("White placed a disc in square c1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
 testRunner.And("Black placed a disc in square d2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
 testRunner.And("White placed a disc in square a3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
 testRunner.And("Black placed a disc in square a4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.And("White placed a disc in square b4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
 testRunner.And("Black placed a disc in square c4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
 testRunner.When("White places a disc in square d4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "a",
                            "b",
                            "c",
                            "d"});
                table12.AddRow(new string[] {
                            "1",
                            "",
                            "",
                            "W",
                            ""});
                table12.AddRow(new string[] {
                            "2",
                            "B",
                            "W",
                            "B",
                            "B"});
                table12.AddRow(new string[] {
                            "3",
                            "B",
                            "B",
                            "W",
                            ""});
                table12.AddRow(new string[] {
                            "4",
                            "B",
                            "B",
                            "B",
                            "W"});
#line 99
 testRunner.Then("the board should be like this", ((string)(null)), table12, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="9th move by Black on the previous 4x4 board")]
        [Xunit.TraitAttribute("FeatureTitle", "Place a disc on the board (4x4)")]
        [Xunit.TraitAttribute("Description", "9th move by Black on the previous 4x4 board")]
        public virtual void _9ThMoveByBlackOnThePrevious4X4Board()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("9th move by Black on the previous 4x4 board", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 107
 testRunner.Given("Black placed a disc in square a2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 108
 testRunner.And("White placed a disc in square c1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.And("Black placed a disc in square d2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
 testRunner.And("White placed a disc in square a3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
 testRunner.And("Black placed a disc in square a4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
 testRunner.And("White placed a disc in square b4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
 testRunner.And("Black placed a disc in square c4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
 testRunner.And("White placed a disc in square d4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
 testRunner.When("Black places a disc in square d3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "a",
                            "b",
                            "c",
                            "d"});
                table13.AddRow(new string[] {
                            "1",
                            "",
                            "",
                            "W",
                            ""});
                table13.AddRow(new string[] {
                            "2",
                            "B",
                            "W",
                            "B",
                            "B"});
                table13.AddRow(new string[] {
                            "3",
                            "B",
                            "B",
                            "B",
                            "B"});
                table13.AddRow(new string[] {
                            "4",
                            "B",
                            "B",
                            "B",
                            "W"});
#line 116
 testRunner.Then("the board should be like this", ((string)(null)), table13, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="10th move by White on the previous 4x4 board")]
        [Xunit.TraitAttribute("FeatureTitle", "Place a disc on the board (4x4)")]
        [Xunit.TraitAttribute("Description", "10th move by White on the previous 4x4 board")]
        public virtual void _10ThMoveByWhiteOnThePrevious4X4Board()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("10th move by White on the previous 4x4 board", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 124
 testRunner.Given("Black placed a disc in square a2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 125
 testRunner.And("White placed a disc in square c1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
 testRunner.And("Black placed a disc in square d2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
 testRunner.And("White placed a disc in square a3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
 testRunner.And("Black placed a disc in square a4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
 testRunner.And("White placed a disc in square b4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
 testRunner.And("Black placed a disc in square c4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
 testRunner.And("White placed a disc in square d4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
 testRunner.And("Black placed a disc in square d3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 133
 testRunner.When("White places a disc in square d1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "a",
                            "b",
                            "c",
                            "d"});
                table14.AddRow(new string[] {
                            "1",
                            "",
                            "",
                            "W",
                            "W"});
                table14.AddRow(new string[] {
                            "2",
                            "B",
                            "W",
                            "B",
                            "W"});
                table14.AddRow(new string[] {
                            "3",
                            "B",
                            "B",
                            "B",
                            "W"});
                table14.AddRow(new string[] {
                            "4",
                            "B",
                            "B",
                            "B",
                            "W"});
#line 134
 testRunner.Then("the board should be like this", ((string)(null)), table14, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="11th move by Black on the previous 4x4 board")]
        [Xunit.TraitAttribute("FeatureTitle", "Place a disc on the board (4x4)")]
        [Xunit.TraitAttribute("Description", "11th move by Black on the previous 4x4 board")]
        public virtual void _11ThMoveByBlackOnThePrevious4X4Board()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("11th move by Black on the previous 4x4 board", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 141
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 142
 testRunner.Given("Black placed a disc in square a2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 143
 testRunner.And("White placed a disc in square c1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
 testRunner.And("Black placed a disc in square d2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
 testRunner.And("White placed a disc in square a3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
 testRunner.And("Black placed a disc in square a4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
 testRunner.And("White placed a disc in square b4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
 testRunner.And("Black placed a disc in square c4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 149
 testRunner.And("White placed a disc in square d4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 150
 testRunner.And("Black placed a disc in square d3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
 testRunner.And("White placed a disc in square d1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 152
 testRunner.When("Black places a disc in square a1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "a",
                            "b",
                            "c",
                            "d"});
                table15.AddRow(new string[] {
                            "1",
                            "B",
                            "",
                            "W",
                            "W"});
                table15.AddRow(new string[] {
                            "2",
                            "B",
                            "B",
                            "B",
                            "W"});
                table15.AddRow(new string[] {
                            "3",
                            "B",
                            "B",
                            "B",
                            "W"});
                table15.AddRow(new string[] {
                            "4",
                            "B",
                            "B",
                            "B",
                            "W"});
#line 153
 testRunner.Then("the board should be like this", ((string)(null)), table15, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Last (12th) move by White on the previous 4x4 board")]
        [Xunit.TraitAttribute("FeatureTitle", "Place a disc on the board (4x4)")]
        [Xunit.TraitAttribute("Description", "Last (12th) move by White on the previous 4x4 board")]
        public virtual void Last12ThMoveByWhiteOnThePrevious4X4Board()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Last (12th) move by White on the previous 4x4 board", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 160
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 161
 testRunner.Given("Black placed a disc in square a2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 162
 testRunner.And("White placed a disc in square c1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 163
 testRunner.And("Black placed a disc in square d2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 164
 testRunner.And("White placed a disc in square a3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 165
 testRunner.And("Black placed a disc in square a4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 166
 testRunner.And("White placed a disc in square b4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 167
 testRunner.And("Black placed a disc in square c4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
 testRunner.And("White placed a disc in square d4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
 testRunner.And("Black placed a disc in square d3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
 testRunner.And("White placed a disc in square d1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
 testRunner.And("Black placed a disc in square a1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 172
 testRunner.When("White places a disc in square b1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "a",
                            "b",
                            "c",
                            "d"});
                table16.AddRow(new string[] {
                            "1",
                            "B",
                            "W",
                            "W",
                            "W"});
                table16.AddRow(new string[] {
                            "2",
                            "B",
                            "B",
                            "W",
                            "W"});
                table16.AddRow(new string[] {
                            "3",
                            "B",
                            "B",
                            "B",
                            "W"});
                table16.AddRow(new string[] {
                            "4",
                            "B",
                            "B",
                            "B",
                            "W"});
#line 173
 testRunner.Then("the board should be like this", ((string)(null)), table16, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PlaceADiscOnTheBoard4X4Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PlaceADiscOnTheBoard4X4Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
